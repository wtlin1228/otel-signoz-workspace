/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppsRouteImport } from './routes/apps'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppsBaseRouteRouteImport } from './routes/apps.$baseRoute'
import { Route as AppsBaseRouteSplatRouteImport } from './routes/apps.$baseRoute.$'

const AppsRoute = AppsRouteImport.update({
  id: '/apps',
  path: '/apps',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppsBaseRouteRoute = AppsBaseRouteRouteImport.update({
  id: '/$baseRoute',
  path: '/$baseRoute',
  getParentRoute: () => AppsRoute,
} as any)
const AppsBaseRouteSplatRoute = AppsBaseRouteSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => AppsBaseRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/apps': typeof AppsRouteWithChildren
  '/apps/$baseRoute': typeof AppsBaseRouteRouteWithChildren
  '/apps/$baseRoute/$': typeof AppsBaseRouteSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/apps': typeof AppsRouteWithChildren
  '/apps/$baseRoute': typeof AppsBaseRouteRouteWithChildren
  '/apps/$baseRoute/$': typeof AppsBaseRouteSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/apps': typeof AppsRouteWithChildren
  '/apps/$baseRoute': typeof AppsBaseRouteRouteWithChildren
  '/apps/$baseRoute/$': typeof AppsBaseRouteSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/apps'
    | '/apps/$baseRoute'
    | '/apps/$baseRoute/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/apps' | '/apps/$baseRoute' | '/apps/$baseRoute/$'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/apps'
    | '/apps/$baseRoute'
    | '/apps/$baseRoute/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AppsRoute: typeof AppsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/apps': {
      id: '/apps'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AppsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/apps/$baseRoute': {
      id: '/apps/$baseRoute'
      path: '/$baseRoute'
      fullPath: '/apps/$baseRoute'
      preLoaderRoute: typeof AppsBaseRouteRouteImport
      parentRoute: typeof AppsRoute
    }
    '/apps/$baseRoute/$': {
      id: '/apps/$baseRoute/$'
      path: '/$'
      fullPath: '/apps/$baseRoute/$'
      preLoaderRoute: typeof AppsBaseRouteSplatRouteImport
      parentRoute: typeof AppsBaseRouteRoute
    }
  }
}

interface AppsBaseRouteRouteChildren {
  AppsBaseRouteSplatRoute: typeof AppsBaseRouteSplatRoute
}

const AppsBaseRouteRouteChildren: AppsBaseRouteRouteChildren = {
  AppsBaseRouteSplatRoute: AppsBaseRouteSplatRoute,
}

const AppsBaseRouteRouteWithChildren = AppsBaseRouteRoute._addFileChildren(
  AppsBaseRouteRouteChildren,
)

interface AppsRouteChildren {
  AppsBaseRouteRoute: typeof AppsBaseRouteRouteWithChildren
}

const AppsRouteChildren: AppsRouteChildren = {
  AppsBaseRouteRoute: AppsBaseRouteRouteWithChildren,
}

const AppsRouteWithChildren = AppsRoute._addFileChildren(AppsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AppsRoute: AppsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
